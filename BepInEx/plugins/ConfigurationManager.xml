<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ConfigurationManager</name>
    </assembly>
    <members>
        <member name="M:ConfigurationManager.LegacySettingSearcher.GetLegacyPluginConfig(BepInEx.BaseUnityPlugin)">
            <summary>
            Used by bepinex 4 plugins
            </summary>
        </member>
        <member name="M:ConfigurationManager.SettingSearcher.GetBepInExCoreConfig">
            <summary>
            Bepinex 5 config
            </summary>
        </member>
        <member name="M:ConfigurationManager.SettingSearcher.GetPluginConfig(BepInEx.BaseUnityPlugin)">
            <summary>
            Used by bepinex 5 plugins
            </summary>
        </member>
        <member name="M:ConfigurationManager.Utilities.Utils.FilterBrowsable``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Boolean)">
            <summary>
                Return items with browsable attribute same as expectedBrowsable, and optionally items with no browsable attribute
            </summary>
        </member>
        <member name="T:ConfigurationManager.ConfigurationManager">
            <summary>
            An easy way to let user configure how a plugin behaves without the need to make your own GUI. The user can change any of the settings you expose, even keyboard shortcuts.
            https://github.com/ManlyMarco/BepInEx.ConfigurationManager
            </summary>
        </member>
        <member name="F:ConfigurationManager.ConfigurationManager.GUID">
            <summary>
            GUID of this plugin
            </summary>
        </member>
        <member name="F:ConfigurationManager.ConfigurationManager.Version">
            <summary>
            Version constant
            </summary>
        </member>
        <member name="E:ConfigurationManager.ConfigurationManager.DisplayingWindowChanged">
            <summary>
            Event fired every time the manager window is shown or hidden.
            </summary>
        </member>
        <member name="F:ConfigurationManager.ConfigurationManager.OverrideHotkey">
            <summary>
            Disable the hotkey check used by config manager. If enabled you have to set <see cref="P:ConfigurationManager.ConfigurationManager.DisplayingWindow"/> to show the manager.
            </summary>
        </member>
        <member name="M:ConfigurationManager.ConfigurationManager.#ctor">
            <inheritdoc />
        </member>
        <member name="P:ConfigurationManager.ConfigurationManager.DisplayingWindow">
            <summary>
            Is the config manager main window displayed on screen
            </summary>
        </member>
        <member name="M:ConfigurationManager.ConfigurationManager.RegisterCustomSettingDrawer(System.Type,System.Action{ConfigurationManager.SettingEntryBase})">
            <summary>
            Register a custom setting drawer for a given type. The action is ran in OnGui in a single setting slot.
            Do not use any Begin / End layout methods, and avoid raising height from standard.
            </summary>
        </member>
        <member name="P:ConfigurationManager.ConfigurationManager.SearchString">
            <summary>
            String currently entered into the search box
            </summary>
        </member>
        <member name="P:ConfigurationManager.LegacySettingEntry.Wrapper">
            <summary>
            Instance of the object that holds this setting. 
            Null if setting is not in a ConfigWrapper.
            </summary>
        </member>
        <member name="T:ConfigurationManager.SettingEntryBase">
            <summary>
            Class representing all data about a setting collected by ConfigurationManager.
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.AcceptableValues">
            <summary>
            List of values this setting can take
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.AcceptableValueRange">
            <summary>
            Range of the values this setting can take
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.ShowRangeAsPercent">
            <summary>
            Should the setting be shown as a percentage (only applies to value range settings)
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.CustomDrawer">
            <summary>
            Custom setting draw action
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.Browsable">
            <summary>
            Show this setting in the settings screen at all? If false, don't show.
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.Category">
            <summary>
            Category the setting is under. Null to be directly under the plugin.
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.DefaultValue">
            <summary>
            If set, a "Default" button will be shown next to the setting to allow resetting to default.
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.HideDefaultButton">
            <summary>
            Force the "Reset" button to not be displayed, even if a valid DefaultValue is available. 
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.HideSettingName">
            <summary>
            Force the setting name to not be displayed. Should only be used with a <see cref="P:ConfigurationManager.SettingEntryBase.CustomDrawer"/> to get more space.
            Can be used together with <see cref="P:ConfigurationManager.SettingEntryBase.HideDefaultButton"/> to gain even more space.
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.Description">
            <summary>
            Optional description shown when hovering over the setting
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.DispName">
            <summary>
            Name of the setting
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.PluginInfo">
            <summary>
            Plugin this setting belongs to
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.ReadOnly">
            <summary>
            Only allow showing of the value. False whenever possible by default.
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.SettingType">
            <summary>
            Type of the variable
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.PluginInstance">
            <summary>
            Instance of the plugin that owns this setting
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.IsAdvanced">
            <summary>
            Is this setting advanced
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.Order">
            <summary>
            Order of the setting on the settings list relative to other settings in a category. 0 by default, lower is higher on the list.
            </summary>
        </member>
        <member name="M:ConfigurationManager.SettingEntryBase.Get">
            <summary>
            Get the value of this setting
            </summary>
        </member>
        <member name="M:ConfigurationManager.SettingEntryBase.Set(System.Object)">
            <summary>
            Set the value of this setting
            </summary>
        </member>
        <member name="M:ConfigurationManager.SettingEntryBase.SetValue(System.Object)">
            <summary>
            Implementation of <see cref="M:ConfigurationManager.SettingEntryBase.Set(System.Object)"/>
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.ObjToStr">
            <summary>
            Custom converter from setting type to string for the textbox
            </summary>
        </member>
        <member name="P:ConfigurationManager.SettingEntryBase.StrToObj">
            <summary>
            Custom converter from string to setting type for the textbox
            </summary>
        </member>
        <member name="T:ConfigurationManager.ValueChangedEventArgs`1">
            <summary>
            Arguments representing a change in value
            </summary>
        </member>
        <member name="M:ConfigurationManager.ValueChangedEventArgs`1.#ctor(`0)">
            <inheritdoc />
        </member>
        <member name="P:ConfigurationManager.ValueChangedEventArgs`1.NewValue">
            <summary>
            Newly assigned value
            </summary>
        </member>
        <member name="T:BepInEx.AcceptableValueListAttribute">
            <summary>
                Specify the list of acceptable values for this variable. It will allow the configuration window to show a list of available values.
            </summary>
        </member>
        <member name="M:BepInEx.AcceptableValueListAttribute.#ctor(System.Object[])">
            <summary>
            Specify the list of acceptable values for this variable. It will allow the configuration window to show a list of available values.
            </summary>
            <param name="acceptableValues">List of acceptable values for this setting</param>
        </member>
        <member name="M:BepInEx.AcceptableValueListAttribute.#ctor(System.String)">
            <summary>
            Specify a method that returns the list of acceptable values for this variable. It will allow the configuration window to show a list of available values.
            </summary>
            <param name="acceptableValueGetterName">Name of an instance method that takes no arguments and returns array object[] that contains the acceptable values</param>
        </member>
        <member name="T:BepInEx.AcceptableValueRangeAttribute">
            <summary>
                Specify the range of acceptable values for this variable. It will allow the configuration window to show a slider
                and filter inputs.
            </summary>
        </member>
        <member name="M:BepInEx.AcceptableValueRangeAttribute.#ctor(System.Object,System.Object,System.Boolean)">
            <param name="minValue">Lowest acceptable value</param>
            <param name="maxValue">Highest acceptable value</param>
            <param name="showAsPercentage">
                Show the current value as % between min and max values if possible. Otherwise show the
                value itself.
            </param>
        </member>
        <member name="M:BepInEx.CustomSettingDrawAttribute.#ctor(System.String)">
            <summary>
            Register a custom field editor drawer that will replace config manager's default field editors
            (The part between setting name and the default button).
            </summary>
            <param name="customFieldDrawMethod">Name of the method that will draw the edit field. 
            The method needs to be an instance method with signature <code>void Name ()</code>. Runs in OnGUI.</param>
        </member>
        <member name="T:BepInEx.KeyboardShortcut">
            <summary>
                A keyboard shortcut that can be used in Update method to check if user presses a key combo.
                Use SavedKeyboardShortcut to allow user to change this shortcut and have the changes saved.
                How to use: Use IsDown instead of the Imput.GetKeyDown in the Update loop.
            </summary>
        </member>
        <member name="M:BepInEx.KeyboardShortcut.#ctor(UnityEngine.KeyCode,UnityEngine.KeyCode[])">
            <summary>
                Create a new keyboard shortcut.
            </summary>
            <param name="mainKey">Main key to press</param>
            <param name="modifiers">Keys that should be held down before main key is registered</param>
        </member>
        <member name="M:BepInEx.KeyboardShortcut.IsDown">
            <summary>
                Check if the main key was just pressed (Input.GetKeyDown), and specified modifier keys are all pressed
            </summary>
        </member>
        <member name="M:BepInEx.KeyboardShortcut.IsPressed">
            <summary>
                Check if the main key is currently held down (Input.GetKey), and specified modifier keys are all pressed
            </summary>
        </member>
        <member name="M:BepInEx.KeyboardShortcut.IsUp">
            <summary>
                Check if the main key was just lifted (Input.GetKeyUp), and specified modifier keys are all pressed.
            </summary>
        </member>
        <member name="T:BepInEx.SavedKeyboardShortcut">
            <summary>
                A keyboard shortcut that is saved in the config file and can be changed by the user if ConfigurationManager plugin
                is present.
                How to use: Run IsPressed in Update to check if user presses the button combo.
            </summary>
        </member>
        <member name="M:BepInEx.SavedKeyboardShortcut.IsPressed">
            <summary>
                Check if the main key is currently held down (Input.GetKey), and specified modifier keys are all pressed
            </summary>
        </member>
        <member name="M:BepInEx.SavedKeyboardShortcut.IsDown">
            <summary>
                Check if the main key was just pressed (Input.GetKeyDown), and specified modifier keys are all pressed
            </summary>
        </member>
        <member name="M:BepInEx.SavedKeyboardShortcut.IsUp">
            <summary>
                Check if the main key was just lifted (Input.GetKeyUp), and specified modifier keys are all pressed.
            </summary>
        </member>
    </members>
</doc>
